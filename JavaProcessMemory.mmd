Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Java<br/>Process<br/>Memory<br/>\(Jocker 2019\)
> align=`center`

- LINK
<pre>https://www.youtube.com/watch?v=kKigibHrV5I</pre>

## checklist
> fillColor=`#00FFDB`,mmd.emoticon=`accept_document`


### do monitoring
> fillColor=`#00FFDB`


### control direct buffers
> fillColor=`#00FFDB`


#### limit max size of allocations
> fillColor=`#00FFDB`

- TOPIC
<pre>176AA33C22DA</pre>

#### limit buffer cache
> fillColor=`#00FFDB`

- TOPIC
<pre>176AA346BDCA</pre>

### use JEMALLOC or TCMALLOC for new services in prod
> fillColor=`#00FFDB`

- TOPIC
<pre>176AD8EF18FA</pre>

### check OS memory stats
> fillColor=`#00FFDB`


### use Native Memory Tracking
> fillColor=`#00FFDB`

- TOPIC
<pre>176AA752856A</pre>

#### use for invetigation in high\-load<br/>because overhead
> fillColor=`#FFCCCC`,mmd.emoticon=`error`


### use async\-profiler
> fillColor=`#00FFDB`,topicLinkUID=`176AA2339B9A`

- TOPIC
<pre>176AA234604A</pre>

## get memory metrics
> fillColor=`#FFFFCC`,mmd.emoticon=`chart`


### top \-o %MEM
> fillColor=`#FFFFCC`,mmd.emoticon=`text`


#### VIRT
> fillColor=`#FFFFCC`,mmd.emoticon=`emotion_ghost`


##### how much memory the program IS ABLE to access
> fillColor=`#FFFFCC`


###### doesn't play big role in 64 bit system
> fillColor=`#00DBFF`,mmd.emoticon=`information`


#### RES
> fillColor=`#FFFFCC`,mmd.emoticon=`storage`


##### RAM in real use
> fillColor=`#FFFFCC`


###### turn off lazy allocation with<br/>\-XX:AlwaysPreTouch
> align=`center`,fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


## Linux PROCFS
> fillColor=`#00DBFF`,mmd.emoticon=`organisation`

- LINK
<pre>https://en.wikipedia.org/wiki/Procfs</pre>

### /proc/meminfo
> fillColor=`#00DBFF`,mmd.emoticon=`zoom`


### /proc/\{PID\}/maps
> fillColor=`#00DBFF`,leftSide=`true`,mmd.emoticon=`zoom`


### /proc/\{PID\}/smaps
> fillColor=`#00DBFF`,leftSide=`true`,mmd.emoticon=`zoom`


## GC
> fillColor=`#FFFFCC`,mmd.emoticon=`compress`


### \-Xmx:\{size\} defines heap size
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


### \-Xms:\{size\} means starting heap size \(not minimal one\!\)
> fillColor=`#FFFFFF`,leftSide=`true`,mmd.emoticon=`lightbulb`


#### if the fixed size is required then<br/>turn off dynamic decrease
> align=`left`,fillColor=`#FFFFCC`


##### \-XX:\-AdaptiveSizePolicy
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


### adaptive heap size policy
> fillColor=`#FFFFCC`,leftSide=`true`


#### allows return non\-used RAM to the host system
> fillColor=`#00DBFF`,mmd.emoticon=`information`


#### can be turned off
> fillColor=`#FFFFCC`


##### \-XX:\-AdaptiveSizePolicy
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


#### can choose heap size dynamcally
> fillColor=`#FFFFCC`,leftSide=`true`


##### managed by flags
> fillColor=`#FFFFCC`

- LINK
<pre>https://docs.oracle.com/cd/E19159-01/819-3681/abeii/index.html</pre>

###### \-XX:MinHeapFreeRatio=\{percentage\}
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


###### \-XX:MaxHeapFreeRatio=\{percentage\}
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


### mark stacks for internal graphs
> fillColor=`#FFFFCC`,leftSide=`true`


#### \-XX:MarkStackSizeMax
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


### remembered sets<br/>keeping info about links between regions
> fillColor=`#FFFFCC`,leftSide=`true`


#### \-XX:G1HeapRegionSize
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


### experiments with OpenJDK11<br/>\(Heap size = 2GB\)
> fillColor=`#FF96BA`,leftSide=`true`,mmd.emoticon=`flask`


#### Serial
> fillColor=`#00FFDB`


##### RAM
> fillColor=`#FFFFCC`,mmd.emoticon=`processor`


###### 7 MB
> fillColor=`#FFFFCC`


##### overhead
> fillColor=`#FFFFCC`,leftSide=`true`,mmd.emoticon=`fire`


###### 0\.3%
> fillColor=`#FFFFCC`


#### Shenandoah
> fillColor=`#00FFDB`,leftSide=`true`


##### RAM
> fillColor=`#FFFFCC`,mmd.emoticon=`processor`


###### 36 MB
> fillColor=`#FFFFCC`


###### it doesn't return RAM to the host OS
> fillColor=`#FFCCCC`,mmd.emoticon=`exclamation`


##### overhead
> fillColor=`#FFFFCC`,leftSide=`true`,mmd.emoticon=`fire`


###### 1\.8%
> fillColor=`#FFFFCC`


#### Parallel
> fillColor=`#00FFDB`,leftSide=`true`


##### RAM
> fillColor=`#FFFFCC`,mmd.emoticon=`processor`


###### 86 MB
> fillColor=`#FFFFCC`


###### it doesn't return RAM to the host OS
> fillColor=`#FFCCCC`,mmd.emoticon=`exclamation`


##### overhead
> fillColor=`#FFFFCC`,leftSide=`true`,mmd.emoticon=`fire`


###### 4\.2%
> fillColor=`#FFFFCC`


#### CMS
> fillColor=`#00FFDB`,leftSide=`true`


##### RAM
> fillColor=`#FFFFCC`,mmd.emoticon=`processor`


###### 141 MB
> fillColor=`#FFFFCC`


###### it can return RAM to the host OS<br/>after several Full GC cycles
> fillColor=`#FFCCCC`,mmd.emoticon=`error`


##### overhead
> fillColor=`#FFFFCC`,leftSide=`true`,mmd.emoticon=`fire`


###### 6\.9%
> fillColor=`#FFFFCC`


#### G1
> fillColor=`#00FFDB`,leftSide=`true`


##### RAM
> fillColor=`#FFFFCC`,mmd.emoticon=`processor`


###### 165 MB
> fillColor=`#FFFFCC`


###### it can return RAM to the host OS<br/>after but after Full GC
> fillColor=`#FFCCCC`,mmd.emoticon=`error`


##### overhead
> fillColor=`#FFFFCC`,leftSide=`true`,mmd.emoticon=`fire`


###### 8\.1%
> fillColor=`#FFFFCC`


#### Z
> fillColor=`#00FFDB`,leftSide=`true`


##### RAM
> fillColor=`#FFFFCC`,mmd.emoticon=`processor`


###### 206 MB
> fillColor=`#FFFFCC`


##### overhead
> fillColor=`#FFFFCC`,leftSide=`true`,mmd.emoticon=`fire`


###### 10\.1%
> fillColor=`#FFFFCC`


## if JVM starts swapping
> fillColor=`#FFCCCC`,mmd.emoticon=`update`


### turn off swap
> fillColor=`#FFCCCC`


### \-XX:\+UseLargePages
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


#### until they can't be swapped
> fillColor=`#FFCCCC`


### lock heap in RAM
> fillColor=`#FFCCCC`


#### mlockall\(\)
> fillColor=`#00DBFF`,mmd.emoticon=`wrench`

- LINK
<pre>https://github.com/lucidworks/mlockall-agent</pre>

## containers
> fillColor=`#00FFDB`,mmd.emoticon=`construction`


### limit visible RAM to notify JVM internal operations
> fillColor=`#00FFDB`


#### use \-XX:MaxRam=\{size\}
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


## tools
> fillColor=`#FFC800`,leftSide=`true`,mmd.emoticon=`ax`


### pmap \-x \{PID\}
> fillColor=`#FFC800`,mmd.emoticon=`text`


#### \[ anon \] \- anonimous region allocated by process during its work
> mmd.emoticon=`highlighter`


### JVM native memory tracking<br/>\(since JDK 1\.7\)
> fillColor=`#FFC800`,leftSide=`true`,mmd.emoticon=`connect`


#### \-XX:NativeMemoryTracking=\[summary|detail\]
> mmd.emoticon=`lightbulb`,topicLinkUID=`176AA752856A`


##### perf\. overhead 5\-10%
> fillColor=`#00DBFF`,mmd.emoticon=`information`


##### \+2 words per malloc
> fillColor=`#00DBFF`,leftSide=`true`,mmd.emoticon=`information`


##### shows ONLY internal JVM allocations
> fillColor=`#00DBFF`,leftSide=`true`,mmd.emoticon=`information`


##### ClassLoader stats
> mmd.emoticon=`stethoscope`


###### JDK 8

####### jmap \-clstats \{PID\}
> mmd.emoticon=`text`


###### JDK 9\+
> leftSide=`true`


####### jcmd \{PID\} VM\.classloader\_stats
> mmd.emoticon=`text`


####### jcmd \{PID\} GC\.class\_stats
> leftSide=`true`,mmd.emoticon=`text`


##### native memory stats
> leftSide=`true`,mmd.emoticon=`stethoscope`


###### jcmd \{PID\} VM\.native\_memory \[detail\]
> mmd.emoticon=`text`


####### RESERVED means reserved RAM
> fillColor=`#00DBFF`,mmd.emoticon=`information`


####### COMMITTED means RAM in real use
> fillColor=`#00DBFF`,leftSide=`true`,mmd.emoticon=`information`


####### mmap shows that region was reserved through call OS
> fillColor=`#00DBFF`,leftSide=`true`,mmd.emoticon=`information`


####### malloc means that region was reserved through malloc
> fillColor=`#00DBFF`,leftSide=`true`,mmd.emoticon=`information`


####### metaspace<br/>since JVM 1\.8
> leftSide=`true`,mmd.emoticon=`user_yoda`


######## It is NOT HEAP\!
> fillColor=`#FFFFCC`,mmd.emoticon=`warning`


######## contains
> leftSide=`true`,mmd.emoticon=`luggage`


######### classes

########## in 64 bit systems moved to<br/>Compressed Class Space
> fillColor=`#00DBFF`,mmd.emoticon=`64_bit`


########### can be configured through<br/>\-XX:CompressedClassSpaceSize=\{size\}
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


############ by default 1G
> fillColor=`#00DBFF`,mmd.emoticon=`information`


############ max 3G
> fillColor=`#FFCCCC`,mmd.emoticon=`error`


######### methods
> leftSide=`true`


######### constant pools
> leftSide=`true`


######### symbols
> leftSide=`true`


######### annotations
> leftSide=`true`


######## unlimited by default
> fillColor=`#FFCCCC`,leftSide=`true`,mmd.emoticon=`exclamation`


######### can be limited through<br/>\-XX:MaxMetaspaceSize=\[unlimited\]
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


######## very recommended monitoring in prod
> fillColor=`#FFCCCC`,leftSide=`true`,mmd.emoticon=`video`


######### \-XX:\+PrintGCDetails
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`

- LINK
<pre>http://www.herongyang.com/JVM/Memory-PrintGCDetails-Garbage-Collection-Logging.html</pre>

#########  \-Xlog:gc\+heap
> fillColor=`#FFFFFF`,leftSide=`true`,mmd.emoticon=`lightbulb`

- LINK
<pre>https://docs.oracle.com/javase/10/jrockit-hotspot/logging.htm#JRHMG125</pre>

######### JDK 9\+
> leftSide=`true`


########## jcmd \{PID\} VM\.metaspace
> mmd.emoticon=`text`


######## internals
> mmd.emoticon=`widgets`


######### OS reserving big blocks in RAM

########## a block spitted by chunks
> mmd.emoticon=`plugin`


########### a chunk contains only classloader data

########### a classloader may have several chunks
> leftSide=`true`


######### USED \<= CAPACITY \<= COMMITTED \<= RESERVED
> leftSide=`true`


########## COMMITTED shows how much RAM<br/>really allocated for metadata

######## tuning

######### \-XX:MaxMetaspaceSize
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


######### \-XX:MetaspaceSize=\{SIZE\}
> fillColor=`#FFFFFF`,leftSide=`true`,mmd.emoticon=`lightbulb`


########## affects full GC for metadata threshold, records in log:<br/>\[Full GC \(Metadata GC Threshold\) \.\.\.\.\. secs\]
> mmd.emoticon=`highlighter`


######### expand/shrink
> leftSide=`true`


########## \-XX:MinMetaspaceFreeRatio=\{percentage\}
> mmd.emoticon=`lightbulb`


########## \-XX:MaxMetaspaceFreeRatio=\{percentage\}
> leftSide=`true`,mmd.emoticon=`lightbulb`


####### JIT compiler
> leftSide=`true`,mmd.emoticon=`emotion_anger`


######## has two internal compilers<br/>C1 and C2

######### tiered compilation<br/>C1\+C2

########## activating heuristic in JDK<br/>code cache size = ReservedCodeCacheSize \* 5
> fillColor=`#FFFFCC`,mmd.emoticon=`caution_biohazard`


########### too small code cache<br/>can produce high CPU load<br/>for loop recompilations
> fillColor=`#FFCCCC`,mmd.emoticon=`exclamation`


######## Code cache

######### tuning

########## \-XX:InitialCodeCacheSize
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


########## \-XX:ReservedCodeCacheSize
> fillColor=`#FFFFFF`,leftSide=`true`,mmd.emoticon=`lightbulb`


####### Thread stack
> leftSide=`true`,mmd.emoticon=`coins`


######## \-Xss\{size\}
> mmd.emoticon=`lightbulb`


######### not allocating RAM on start<br/>committed \!= resident
> fillColor=`#FFCCCC`,mmd.emoticon=`error`


########## default 320K
> fillColor=`#00DBFF`,mmd.emoticon=`32_bit`


########## default 1024K
> fillColor=`#00DBFF`,leftSide=`true`,mmd.emoticon=`64_bit`


######### min use ~200K

######## \-XX:ThreadStackSize
> fillColor=`#FFFFFF`,leftSide=`true`,mmd.emoticon=`lightbulb`


######## \-XX:CompilerThreadStackSize
> fillColor=`#FFFFFF`,leftSide=`true`,mmd.emoticon=`lightbulb`


######## use jstackmem to measure
> fillColor=`#00DBFF`,mmd.emoticon=`wrench`

- LINK
<pre>https://github.com/apangin/jstackmem</pre>

####### Symbol
> leftSide=`true`,mmd.emoticon=`asterisk`


######## just two big hash tables

######### Symbol table
> mmd.emoticon=`basket`


########## names, signatures etc

########### jcmd \{PID\} VM\.symboltable
> mmd.emoticon=`text`


######### String table
> mmd.emoticon=`basket`


########## interned strings

########### strings with called intern\(\)

############ jcmd \{PID\} VM\.stringtable
> mmd.emoticon=`text`


####### Internal
> fillColor=`#FF96BA`,leftSide=`true`,mmd.emoticon=`widgets`


######## all Off\-heap related stuff

######### Direct ByteBuffers

########## since JDK 11 all Direct ByteBuffer stuff <br/>moved to the Other section
> fillColor=`#FFCCCC`,mmd.emoticon=`error`


########## ByteBuffer\.allocateDirect

########### \-XX:MaxDirectMemorySize=\{size\}
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`,topicLinkUID=`176AA33C22DA`


############ by default same size as heap
> fillColor=`#00DBFF`,mmd.emoticon=`information`


########## FileChannel\.map
> leftSide=`true`


########### not limited
> fillColor=`#FFCCCC`,mmd.emoticon=`exclamation`


########### can't be shown by Native Memory Tracker
> fillColor=`#FFCCCC`,leftSide=`true`,mmd.emoticon=`exclamation`


########### can be shown in RSS \(resident set size\) of process<br/>depends on use of the maped files
> leftSide=`true`


############ pmap \-X \{PID\}
> mmd.emoticon=`text`


########## JDK creates temporary direct byte buffers<br/>even if ByteBuffer\.wrap in use
> leftSide=`true`


########### JDK has internal cache of direct buffers for such cases<br/>sun\.nio\.ch\.Util\.BufferCache
> topicLinkUID=`176AA346BDCA`


############ the cache never shinks
> fillColor=`#FFCCCC`,mmd.emoticon=`exclamation`


############ the cache is ThreadLocal
> fillColor=`#FFCCCC`,leftSide=`true`,mmd.emoticon=`exclamation`


############ can be tuned through<br/>\-Djdk\.nio\.maxCachedBufferSize=\{size\}
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


########## if memory leaks as many RSS allocations
> leftSide=`true`

- TOPIC
<pre>176AA2936F5A</pre>

########### try alternative allocators
> mmd.emoticon=`pepper`,topicLinkUID=`176AD8EF18FA`


############ jemalloc
- LINK
<pre>http://jemalloc.net/</pre>

############# better processing of defragmentation
> fillColor=`#00DBFF`,mmd.emoticon=`information`


############# optimized for multi\-threading
> fillColor=`#00DBFF`,leftSide=`true`,mmd.emoticon=`information`


############# LD\_PRELOAD=/usr/lib64/libjemalloc\.so
> mmd.emoticon=`text`


############ tcmalloc
> leftSide=`true`

- LINK
<pre>https://github.com/google/tcmalloc</pre>

############# LD\_PRELOAD=/usr/lib/libtcmalloc\.so\.4
> mmd.emoticon=`text`


########## how to free
> fillColor=`#FFCCCC`,mmd.emoticon=`toilet_pan`


########### automatically after GC<br/>if buffer is not reacheable

############ can be affected by \(because uses call System\.gc\(\)\)<br/>\-XX:\+DisableExplicitGC
> mmd.emoticon=`lightbulb`


############# better use<br/>\-XX:\+ExplicitGCInvokesConcurrent
> fillColor=`#FFFFFF`,mmd.emoticon=`lightbulb`


######### Unsafe\.allocateMemory
> leftSide=`true`


### async\-profiler
> fillColor=`#FFC800`,mmd.emoticon=`multitool`,topicLinkUID=`176AA234604A`

- LINK
<pre>https://github.com/jvm-profiling-tools/async-profiler</pre>

#### malloc profiling
> fillColor=`#00FFDB`


##### profiler\.sh \-d 10 \-e malloc \-f malloc\.svg jps
> mmd.emoticon=`text`


#### mprotect profiling
> fillColor=`#00FFDB`,leftSide=`true`


##### profiler\.sh \-d 10 \-e mprotect \-f mprotect\.svg jps
> mmd.emoticon=`text`,topicLinkUID=`176AA2936F5A`


#### core tracepoint events
> fillColor=`#00FFDB`


##### get list of all events

###### perf list
> mmd.emoticon=`text`

