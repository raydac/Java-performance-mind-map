Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# Java Performance
> fillColor=`#99CCFF`,mmd.image=`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`,textColor=`#000000`

- LINK
<pre>https://github.com/raydac/Java-performance-mind-map</pre>

## Tools
> fillColor=`#FFCC66`,leftSide=`true`,mmd.emoticon=`wrench`


### OS
> fillColor=`#FFFF00`,mmd.emoticon=`processor`


#### CPU
> fillColor=`#99CCFF`


##### mpstat<br/>\(report CPU statistics\)
> fillColor=`#99CCFF`,topicLinkUID=`1575B5F9B7AA`

- LINK
<pre>https://en.wikipedia.org/wiki/Mpstat</pre>

###### sudo apt\-get install sysstat
> fillColor=`#FFFF99`,mmd.emoticon=`text`


#### Network and IO
> fillColor=`#99CCFF`,leftSide=`true`


##### netstat<br/>\(network connections, tables, statistics, connections\)
> fillColor=`#99CCFF`

- LINK
<pre>https://en.wikipedia.org/wiki/Netstat</pre>

##### iptraf<br/>\(Interactive Colorful IP LAN Monitor\)
> fillColor=`#99CCFF`,leftSide=`true`

- LINK
<pre>http://linuxcommand.org/man_pages/iptraf8.html</pre>

###### sudo apt\-get install iptraf
> fillColor=`#FFFF99`,mmd.emoticon=`text`


##### bwm\-ng<br/>\(live bandwidth monitor for network and disk IO\)
> fillColor=`#99CCFF`,leftSide=`true`

- LINK
<pre>https://sourceforge.net/projects/bwmng/</pre>

###### sudo apt\-get install bwm\-ng
> fillColor=`#FFFF99`,mmd.emoticon=`text`


#### System
> fillColor=`#99CCFF`,leftSide=`true`


##### sar<br/>\(collect, report, or save system activity information\)
> fillColor=`#99CCFF`

- LINK
<pre>http://linuxcommand.org/man_pages/sar1.html</pre>

##### top<br/>\(display Linux tasks\)
> fillColor=`#99CCFF`,leftSide=`true`

- LINK
<pre>https://linuxconfig.org/learning-linux-commands-top</pre>

##### strace<br/>\(trace system calls and signals\)
> fillColor=`#99CCFF`,leftSide=`true`

- LINK
<pre>http://man7.org/linux/man-pages/man1/strace.1.html</pre>

##### perf<br/>\(performance analysis tool for Linux\)
> fillColor=`#99CCFF`,leftSide=`true`

- LINK
<pre>http://www.brendangregg.com/perf.html</pre>

###### sudo apt\-get install linux\-tools
> fillColor=`#FFFF99`,mmd.emoticon=`text`


##### oprofile<br/>\(system\-wide profiler for Linux\)
> fillColor=`#99CCFF`,leftSide=`true`

- LINK
<pre>http://oprofile.sourceforge.net</pre>

##### vmstat<br/>\(report virtual memory statistics\)
> fillColor=`#99CCFF`,leftSide=`true`

- LINK
<pre>http://linuxcommand.org/man_pages/vmstat8.html</pre>

##### numastat<br/>\(print NUMA memory allocation statistics\)
> fillColor=`#99CCFF`,leftSide=`true`

- LINK
<pre>http://man7.org/linux/man-pages/man8/numastat.8.html</pre>

###### sudo apt\-get install numactl
> fillColor=`#FFFF99`,mmd.emoticon=`text`


### JVM
> fillColor=`#FFFF00`,leftSide=`true`,mmd.emoticon=`emotion_ghost`


#### GC
> fillColor=`#99CCFF`


##### GChisto<br/>\(GC log visualization tool\)
> fillColor=`#99CCFF`

- LINK
<pre>http://java.net/projects/gchisto</pre>

##### PrintGCStats<br/>\(tool to report GC statistics in HotSpot\)
> fillColor=`#99CCFF`,leftSide=`true`

- LINK
<pre>http://java.net/projects/printgcstats/</pre>

##### VisualVM<br/>\(visual tool with rich set of plugins\)
> fillColor=`#99CCFF`

- LINK
<pre>https://visualvm.java.net/</pre>

###### VisualGC plugin
> fillColor=`#99CCFF`,topicLinkUID=`176ADF252BCA`


#### Execution
> fillColor=`#99CCFF`,leftSide=`true`


##### jstack<br/>\(show JVM stack trace\)
> fillColor=`#99CCFF`

- LINK
<pre>http://docs.oracle.com/javase/7/docs/technotes/tools/share/jstack.html</pre>

##### jrmc<br/>\(JRocket Mission Control profiler\)
> fillColor=`#99CCFF`,leftSide=`true`

- LINK
<pre>http://www.oracle.com/technetwork/middleware/jrockit/overview/index-090630.html</pre>

## Analyzing<br/>with tools
> fillColor=`#FFFF99`,mmd.emoticon=`flask`


### mpstat
> fillColor=`#FFCC66`

- TOPIC
<pre>1575B5F9B7AA</pre>

#### too high %sys
> fillColor=`#FFCC66`

- NOTE
<pre>Show  the percentage of CPU utilization that occurred while executing at the system level (kernel). Note  that this does not include the time spent servicing interrupts or softirqs.
---
most likely that the problem is not in the application</pre>

##### too high network utilization?

###### check network cables and their parameters\!
> fillColor=`#FF9999`,mmd.emoticon=`exclamation`


###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### netstat
> fillColor=`#99CCFF`


####### sar
> fillColor=`#99CCFF`,leftSide=`true`


####### iptraf
> fillColor=`#99CCFF`,leftSide=`true`


####### bwm\-ng
> fillColor=`#99CCFF`,leftSide=`true`


###### try decrease number of IO operations
> leftSide=`true`


###### try decrease data size for IO operations
> leftSide=`true`


###### try bufferization, Bandwith\-Delay Product,MTU

###### try data compression
> leftSide=`true`


###### try faster network interfaces
> leftSide=`true`


###### try virtual network interfaces<br/>\(move your application components into cloud\)
> leftSide=`true`


##### too high scheduler utilization?
> leftSide=`true`

- NOTE
<pre>too big runequeue - runqueue is a queue of tasks reading to be executed but there is not a free CPU which could execute them
too big ctxsw/sec - the number of context switches, if the number is too big then there are too many threads in the system</pre>

###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### vmstat
> fillColor=`#99CCFF`


####### mpstat
> fillColor=`#99CCFF`,leftSide=`true`


####### collectl
> fillColor=`#99CCFF`


###### usually it is very big runqueue<br/>and ctxsw/sec \(total number of context switches/sec\)
> mmd.emoticon=`information`


###### try limit number of threads in your application
> leftSide=`true`


##### swapping?
> leftSide=`true`


###### GC IS NOT SWAP FRIENDLY AT ALL\!\!\!
> fillColor=`#FF9999`,mmd.emoticon=`exclamation`


###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### top
> fillColor=`#99CCFF`


####### sar
> fillColor=`#99CCFF`,leftSide=`true`


###### big swap size, many page faults
> mmd.emoticon=`information`


###### try to add memory
> leftSide=`true`


###### try to decrease memory per process
> leftSide=`true`


###### swappiness\!
> leftSide=`true`


##### other kernel?
> leftSide=`true`


###### kernel may have bugs<br/>report them if you see slowness or issues
> fillColor=`#FF9999`,mmd.emoticon=`caution_biohazard`


###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### strace
> fillColor=`#99CCFF`


####### perf
> fillColor=`#99CCFF`,leftSide=`true`


####### oprofile
> fillColor=`#99CCFF`,leftSide=`true`


###### check system calls
> leftSide=`true`


####### which calls?

####### are such calls really needed?

###### tune kernel

#### too high %irq and %soft
> fillColor=`#FFCC66`

- NOTE
<pre> %irq - Show the percentage of time spent by the CPU or CPUs to  service interrupts.
%soft - Show  the percentage of time spent by the CPU or CPUs to service softirqs.  A softirq (software interrupt) is one  of  up  to  32 enumerated software interrupts which can run on multiple CPUs at once.</pre>

##### device communication?

###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### mpstat
> fillColor=`#99CCFF`


####### sar
> fillColor=`#99CCFF`,leftSide=`true`


###### check source of interruptions

###### try balance IRQ processing<br/>\(may be only CPU processing all system interruptions\)
> mmd.emoticon=`lightbulb`


###### try decrease number of system timers
> mmd.emoticon=`lightbulb`


#### too high %iowait
> fillColor=`#FFCC66`

- NOTE
<pre>Show  the percentage of time that the CPU or CPUs were idle during which the system had an outstanding disk I/O request.</pre>

##### too many disk operations?

###### DON'T USE SSD IN THE CASE\!
> fillColor=`#FF9999`,mmd.emoticon=`exclamation`


###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### iostat
> fillColor=`#99CCFF`


####### sar
> fillColor=`#99CCFF`


###### decrease physical IO operations

####### increase caching
> mmd.emoticon=`lightbulb`


####### use bufferization
> mmd.emoticon=`lightbulb`


##### file/block cache number is not enough?
> leftSide=`true`


###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### top
> fillColor=`#99CCFF`


####### sar
> fillColor=`#99CCFF`,leftSide=`true`


###### increase caches
> leftSide=`true`,mmd.emoticon=`lightbulb`


###### don't use flush\(\) too often
> leftSide=`true`,mmd.emoticon=`lightbulb`


#### too high %idle
> fillColor=`#FFCC66`

- NOTE
<pre>Show the percentage of time that the CPU or CPUs were  idle  and  the system did not have an outstanding disk I/O request.</pre>

##### thread number is not enough?

###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### vmstat
> fillColor=`#99CCFF`


####### mpstat
> fillColor=`#99CCFF`,leftSide=`true`


####### jstack
> fillColor=`#99CCFF`,leftSide=`true`


###### increase or add parallelization into application
> leftSide=`true`,mmd.emoticon=`lightbulb`


###### switch off CMT \(chip multithreading\)
> leftSide=`true`,mmd.emoticon=`lightbulb`


##### RUNNABLE thread number is not enough?
> leftSide=`true`


###### wait locks

####### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


######## lock profilers \(jrmc etc\)
> fillColor=`#99CCFF`


######## jstack \(shows very long lock\)
> fillColor=`#99CCFF`,leftSide=`true`


####### try to optimize locks and decrease their number
> leftSide=`true`


####### try lock\-free algorithms and data structures
> leftSide=`true`


##### too few GC threads? \(a rare case\)
> leftSide=`true`


###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### JVM KEY: \-verbose:gc
> fillColor=`#99FF99`


###### try increase GC thread number
> leftSide=`true`


###### decrease GC pauses
> leftSide=`true`


#### too high %soft
> fillColor=`#FFCC66`

- NOTE
<pre>%soft - Show  the percentage of time spent by the CPU or CPUs to service softirqs.  A softirq (software interrupt) is one  of  up  to  32 enumerated software interrupts which can run on multiple CPUs at once.</pre>

##### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


###### mpstat
> fillColor=`#99CCFF`


###### sar
> fillColor=`#99CCFF`,leftSide=`true`


##### balance IRQ processing, may be only one CPU<br/>under load for all system interruptions
> mmd.emoticon=`lightbulb`


##### Check number of timers in<br/>your system and decrease them if too many
> mmd.emoticon=`lightbulb`


#### too high %usr
> fillColor=`#FFCC66`

- NOTE
<pre>Show  the percentage of CPU utilization that occurred while executing at the user level (application).</pre>

##### JVM issues?

###### use latest JVM version
> mmd.emoticon=`lightbulb`


####### Optimizations for old cores<br/>are backported only for very big $$$
> fillColor=`#FFFF00`,mmd.emoticon=`money`


###### GC

####### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


######## JVM KEY: verbose:gc
> fillColor=`#99FF99`


######## JVM KEY: \-XX:\+PrintGCDetails
> fillColor=`#99FF99`


######## VisualGC
> fillColor=`#99CCFF`

- TOPIC
<pre>176ADF252BCA</pre>

####### try change thread stack size parameter<br/>by default it takes 200\-300 kBytes per Thread
> mmd.emoticon=`lightbulb`


######## JVM KEY: \-Xss\<size\>
> fillColor=`#99FF99`


####### common GC tuning

######## Oracle HotSpot

######### JVM 6\.x has HotSpot 20<br/>the HotSpot version doesn't include<br/>many critical performance fixes

########## Hack: Try to replace HotSpot DLL in 1\.6<br/>by HotSpot 23 DLL from JVM 7\.x

######### try increase heap size

########## JVM KEY: \-Xmx\<size\>
> fillColor=`#99FF99`


########### than more memory for GC<br/>than better its work\!

######### try change GC algorithm

########## The default GC is chosen by your platform characteristics\!\!\! CMS or G1 are never chosen as default ones\!\!\!
> fillColor=`#FF9999`,mmd.emoticon=`exclamation`


########## Serial GC

########### JVM KEY: \-XX:\+UseSerialGC
> fillColor=`#99FF99`


########## Parallel GC
> topicLinkUID=`1575BCCE9A1A`


########### JVM KEY: \-XX:\+UseParallelGC
> fillColor=`#99FF99`


############ only the GC supports NUMA\!

############ it didn't turn on the old gen collection until 7u2

########### JVM KEY: \-XX:\+UseParallelOldGC
> fillColor=`#99FF99`


############ it will be chosen automatically since 7u2

########## CMS<br/>\(Concurent Mark Sweep\)
> topicLinkUID=`1575BCD7B31A`


########### JVM KEY: \-XX:\+UseConcMarkSweepGC
> fillColor=`#99FF99`


############ Doesn't unload classes by default

############# JVM KEY: \-XX:\+CMSClassUnloadingEnabled
> fillColor=`#99FF99`


########## Garbage\-First GC \(G1\)
> topicLinkUID=`1575BCDF350A`


########### Fully supported by Oracle since 7u4\!\!\!

########### Don't recommended to be used for JVM 6\!

########### At present \(june 2012\) it knows nothing about NUMA\!

########### JVM KEY: \-XX:\+UseG1GC
> fillColor=`#99FF99`


########### tuning

############ the default heap memory region size 1MB

############# JVM KEY: \-XX:G1HeapRegionSize=n
> fillColor=`#99FF99`


############## the maximum value 32MB\!

############ set the maximum pause for GC \(a soft parameter\)

############# JVM KEY: \-XX:MaxGCPauseMillis=\<milliseconds\>
> fillColor=`#99FF99`


############ set the allowed time interval between GC \(a soft parameter\)

############# JVM KEY: \-XX:GCPauseIntervalMillis=\<milliseconds\>
> fillColor=`#99FF99`


########### recommended if

############ a good productivity is desired

############ pause length \< 0\.5\-1s

############ minimal tuning is desired

############ the heap size bigger than 5\-8Gb

############ the heap in use more than 50%

############ serious vary object allocation time \(for inst\. day 500Mb/sec, night 10Mb/sec\)

############ lesser heap fragmentation desired \(decreasing FullGC\)

########### not recomended if

############ your current chosen GC works well

############ strict requirement for pauses lesser than 100ms

############ the maximal throughput is desired \(use ParallelGC\)

########## still choosing GC?

########### is maximal throughput needed?
- TOPIC
<pre>1575BCCE9A1A</pre>

########### is heap less than 2Gb?
- TOPIC
<pre>1575BCD7B31A</pre>

########### decrease pauses?
- TOPIC
<pre>1575BCDF350A</pre>

########### pauses must be less than 20\-30 msec?
- TOPIC
<pre>15758EAB4C4A</pre>

########## USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


########### don't be afraid to use the GC logging in production\!\!\! the possible overhead is very low\!
> fillColor=`#FFFF00`,mmd.emoticon=`warning`


########### JVM KEY: \-XX:\+PrintGCDetails
> fillColor=`#99FF99`


########### JVM KEY: \-XX:\+PrintGCTimeStamps
> fillColor=`#99FF99`


########### JVM KEY: \-XX:\+PrintGCDateStamps
> fillColor=`#99FF99`


########### JVM KEY: \-XX:\+PrintHeapAtGC
> fillColor=`#99FF99`


########### JVM KEY: \-XX:\+PrintTenuringDistribution
> fillColor=`#99FF99`


########### JVM KEY: \-Xloggc=\<file\>
> fillColor=`#99FF99`


########### PrintGCStats
> fillColor=`#99CCFF`


########### GChisto
> fillColor=`#99CCFF`


########### VisualGC
> fillColor=`#99CCFF`


######## Oracle JRockit

######### try change GC algorithm

########## Deterministic GC
> topicLinkUID=`15758EAB4C4A`


########### JVM KEY: \-XgcPrio:deterministic
> fillColor=`#99FF99`


########### JVM KEY: \-XpauseTarget=\<milliseconds\>
> fillColor=`#99FF99`


###### JIT

####### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


######## JVM KEY: \-XX:\+PrintCompilation
> fillColor=`#99FF99`


######## MXBeans \(VisualVM\)
> fillColor=`#99CCFF`


####### try change work mode \(select the server mode for the JVM\)

######## THE DEFAULT MODE DEPENDS ON THE PLATFORM CHARACTERISTICS\!\!\!
> fillColor=`#FFFF00`,mmd.emoticon=`error`


######## JVM KEY: \-server
> fillColor=`#99FF99`


######### Must be the first switch provided on the command line\.

######### It makes more aggressive optimization

######### Chose the mode if you need faster work

######### a method will be compiled into native code after 10000 calls \(by default\)

########## JVM KEY: \-XX:CompileThreshold=\<calls number\>
> fillColor=`#99FF99`


########### the default value is 10000

########## It's a good idea to make warm\-up calls for your methods to be compiled into native code

######### slow launch?

########## JVM KEY: \-XX:\+TieredCompilation
> fillColor=`#99FF99`


######### may be to try more aggressive inline strategy?

########## JVM KEY: \-XX:MaxInlineSize=\<bytecode size\>
> fillColor=`#99FF99`

- NOTE
<pre>Maximum bytecode size of a method to be inlined.</pre>

########### the default value is 35 \(it is very small number\)

########## JVM KEY: \-XX:InlineSmallCode=\<size of native code in bytes\>
> fillColor=`#99FF99`

- NOTE
<pre>Inline a previously compiled method only if its generated native code size is less than this. The default value varies with the platform on which the JVM is running.</pre>

########### The default value varies with the platform on which the JVM is running\.

########## JVM KEY: \-XX:FreqInlineSize=\<bytecode size\>
> fillColor=`#99FF99`


########### The default value varies with the platform on which the JVM is running\.

######## JVM KEY: \-client
> fillColor=`#99FF99`


######### Must be the first switch provided on the command line\.

######### Choose the mode if you need faster start

####### Oracle JVM has dozens of keys to tune JIT compilation
> fillColor=`#99FF99`,mmd.emoticon=`lightbulb`

- LINK
<pre>http://www.oracle.com/technetwork/systems/vmoptions-jsp-140102.html</pre>

###### slow classloading

####### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


######## JVM KEY: verbose:class
> fillColor=`#99FF99`


######## MXBeans
> fillColor=`#99CCFF`


####### try disable class verification

######## JVM KEY: \-\-no\-verify
> fillColor=`#99FF99`


####### try switch on the class data sharing

######## JVM KEY: \-Xshare:on
> fillColor=`#99FF99`


###### sometime it is a good idea<br/>to change whole JVM
> mmd.emoticon=`lightbulb`


###### wait for Jigsaw
> mmd.emoticon=`robot`


##### Algorithmic issues?

###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### Profilers
> fillColor=`#99CCFF`

- LINK
<pre>https://zeroturnaround.com/rebellabs/top-5-java-profilers-revealed-real-world-data-with-visualvm-jprofiler-java-mission-control-yourkit-and-custom-tooling/</pre>

####### code analysis
> fillColor=`#99CCFF`,mmd.emoticon=`brain`


###### too complex algorithms

####### make optimizations and simplifications

####### try algorithms with lower "performance constants" <br/>\(for instance use ArrayList instead of LinkedList\)
> mmd.emoticon=`lightbulb`


###### data \(anti\)caching

####### check appropriate use of caches

####### may be it is better to use new objects instead caching in your case?
> mmd.emoticon=`lightbulb`


###### active idle

####### polling

####### check for spinlocks

######## they look like 100% CPU loading

##### Memory issues?

###### TLB<br/>\(translation lookaside buffer\)
- LINK
<pre>https://en.wikipedia.org/wiki/Translation_lookaside_buffer</pre>

####### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


######## solstudio
> fillColor=`#99CCFF`


######## vtune
> fillColor=`#99CCFF`


######## perf
> fillColor=`#99CCFF`


######## hardware counters
> fillColor=`#99CCFF`


####### try large memory pages

######## JVM KEY: \-XX:\+UseLargePages
> fillColor=`#99FF99`


######### somewhere needs root<br/>privileges
> fillColor=`#FFFF99`,mmd.emoticon=`warning`


####### decrease size of data working set
> mmd.emoticon=`lightbulb`


###### Troubles with PermGen<br/>\(for Java \< 1\.8\)

####### out of memory but not grows

######## JVM KEY: \-XX:PermSize
> fillColor=`#99FF99`


######## JVM KEY: \-XX:MaxPermSize
> fillColor=`#99FF99`


####### grows and out of memory

######## JVM KEY: \-XX:\+UseConcMarkSweepGC
> fillColor=`#99FF99`


######## JVM KEY: \-XX:\+CMSPermGenSweepingEnabled
> fillColor=`#99FF99`


######## JVM KEY: \-XX:\+CMSClassUnloadingEnabled
> fillColor=`#99FF99`


###### Memory bandwidth
- LINK
<pre>https://en.wikipedia.org/wiki/Memory_bandwidth</pre>

####### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


######## busstat \(Solaris\)
> fillColor=`#99CCFF`


####### try faster memory \(dual channel memory instead of single channel memory\)
> mmd.emoticon=`lightbulb`


###### Caches

####### capacity

######## USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


######### solstudio
> fillColor=`#99CCFF`


######### vtune
> fillColor=`#99CCFF`


######### perf
> fillColor=`#99CCFF`


######### hardware counters
> fillColor=`#99CCFF`


######## try compress 32bit pointers<br/>\(for 64bit systems\)
> mmd.emoticon=`lightbulb`


######### JVM KEY: \-XX:\+UseCompressedOops
> fillColor=`#99FF99`


######## shrink your data sets <br/>\(remember that RAM is very slow entity\!\)
> mmd.emoticon=`lightbulb`


######## try enable/disable JVM software prefetcher
> mmd.emoticon=`lightbulb`


######### JVM KEY: \-XX:AllocPrefetchStyle=\<N\>
> fillColor=`#99FF99`

- NOTE
<pre>Generated code style for prefetch instructions</pre>

########## 0 \- no prefetch instructions are generated

########## 1 \- execute prefetch instructions after each allocation \(DEFAULT\)

########## 2 \-  use TLAB allocation watermark pointer to gate when prefetch instructions are executed

######### JVM KEY: \-XX:AllocatePrefetchLines=\<number of lines\>
> fillColor=`#99FF99`

- NOTE
<pre>Number of cache lines to load after the last object allocation using prefetch instructions generated in JIT compiled code. Default values are 1 if the last allocated object was an instance and 3 if it was an array. </pre>

######### JVM KEY: \-XX:AllocatePrefetchDistance=\<distance in bytes\>
> fillColor=`#99FF99`

- NOTE
<pre>Sets the prefetch distance for object allocation. Memory about to be written with the value of new objects is prefetched into cache at this distance (in bytes) beyond the address of the last allocated object. Each Java thread has its own allocation point. The default value varies with the platform on which the JVM is running.</pre>

######## try enable/disable hardware prefetcher
> mmd.emoticon=`lightbulb`

- LINK
<pre>https://en.wikipedia.org/wiki/Instruction_prefetch</pre>

######## temporal locality

######### try block decompositions

######## spatial locality

######### try compact data structures
> mmd.emoticon=`lightbulb`


########## complex java\.util collections may take 14\-30 times more memory than its primitive representation\!
> fillColor=`#FF9999`,mmd.emoticon=`caution_biohazard`


######## strings

######### JVM KEY: \-XX:\+UseCompressedStrings
> fillColor=`#99FF99`

- NOTE
<pre>Use a byte[] for Strings which can be represented as pure ASCII. (Introduced in Java 6 Update 21 Performance Release) </pre>

########## since Java 6u21

######### JVM KEY: \-XX:\+OptimizeStringConcat
> fillColor=`#99FF99`

- NOTE
<pre>Optimize String concatenation operations where possible. (Introduced in Java 6 Update 20) </pre>

########## since Java 6u20

######### JVM KEY: \-XX:\+UseStringCache
> fillColor=`#99FF99`

- NOTE
<pre>Enables caching of commonly allocated strings.</pre>

####### coherence

######## USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


######### Java profilers
> fillColor=`#99CCFF`


######### perf
> fillColor=`#99CCFF`


######### solstudio
> fillColor=`#99CCFF`


######### hardware counters
> fillColor=`#99CCFF`


######## primitives

######### plain memory read/write

########## no guarantees

######### volatile read/write

########## guarantee that changes are visible

######### Atomics \(CAS\)

########## guarantee of atomic changes

########## it's base for wait\-free algorithms

######### Spin\-loops

########## guarantee of atomicity for group of changes

########## it's base for lock\-free algorithms

######### Spin\-locks
- LINK
<pre>https://en.wikipedia.org/wiki/Spinlock</pre>

########## visible as 100% CPU loading

########## guarantee mutual exclusion

########## provides ownership

######### Wait\-locks
- LINK
<pre>https://en.wikipedia.org/wiki/Busy_waiting</pre>

########## guarantee mutual exclusion

########## can stop thread

########### it makes less CPU loading than for spin\-lock

########## java\.util\.concurrent\.ReentrantLock
- LINK
<pre>https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html</pre>

########### There was a bug in java\.util\.concurrent\.locks\.ReentrantReadWriteLock, the bug fixed since 7b25\!

######## techniques

######### choose the right primitive for interthread communication

########## consistence

########## expected number of conflicts

########## expected conflict length

######### try noncoherency checks

########## use light condition before hard operations
> mmd.emoticon=`lightbulb`


########## it doesnt work? it's a hard operation

######### try striping shared places

########## Locks

########## Queues

########## Counters

######### try give up interthread communication at all
> mmd.emoticon=`lightbulb`


########## Immutability

########## Thread Locals

########## Check that your threads don't share a java\.util\.Random object

########### Use java\.util\.concurrent\.ThreadLocalRandom

######### check "false sharing" \(cores working with the same cache memory line\)
> mmd.emoticon=`exclamation`


########## make object padding
- NOTE
<pre>EXAMPLE:
static final class Cell {
    volatile long p0, p1, p2, p3, p4, p5, p6;
    volatile long value1;
    volatile long q0, q1, q2, q3, q4, q5, q6;
}
</pre>

########### ARM \(32 bytes\)

########### x86/SPARC/ARM \(64 bytes\)

########### PowerPC \(128 bytes\)

########### @sun\.misc\.Contended

############ Java 1\.8

########## Break to independent objects and padding

###### NUMA \(NUCA\)<br/>Non\-Uniform Memory Access

####### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


######## numastat
> fillColor=`#99CCFF`


####### Fractal structure

######## try restrict communications between cores, packages, data centers

####### try switch on NUMA

######## JVM KEY: \-XX:\+UseNUMA
> fillColor=`#99FF99`


######### it partly works under windows \(only interleaving\)\!

##### CPU issues?

###### USE TOOLS
> fillColor=`#FFCC66`,mmd.emoticon=`wrench`


####### vtune
> fillColor=`#99CCFF`


####### solstudio
> fillColor=`#99CCFF`


####### perf
> fillColor=`#99CCFF`


####### hardware counters
> fillColor=`#99CCFF`


###### frequency is not enough

####### overclocking

####### tune cpufreq

######## check for "ondemand" mode and change if turned on

####### lock critical threads for core<br/>\(thread affinity\)

######## Libraries
> mmd.emoticon=`bookshelf`


######### https://github\.com/peter\-lawrey/Java\-Thread\-Affinity
- LINK
<pre>https://github.com/peter-lawrey/Java-Thread-Affinity</pre>

####### NB\! It is very expensive to wake up a thread in Java<br/>It can take up to 50 uS\!
> fillColor=`#FF9999`,mmd.emoticon=`error`


###### number of executing units is<br/>not enough?

####### try special code

######## go to native code \(JNI\)

######### Java\-\>JNI calls are faster than JNI\-\>Java ones
> mmd.emoticon=`error`


######## make own intrinsics for JIT
- LINK
<pre>https://en.wikipedia.org/wiki/Intrinsic_function</pre>

######### too hardcore solution\!
> mmd.emoticon=`user_superman`


####### try special equipment

######## cryptoprocessors

######## GPU

####### increase number of CPU cores

####### Use ForkAndJoin to parallel your tasks
- LINK
<pre>https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html</pre>

######## since Java 1\.7

###### limited ILP<br/>\(Instruction\-level parallelism\)
- LINK
<pre>https://en.wikipedia.org/wiki/Instruction-level_parallelism</pre>

####### try decrease number of branches

####### try to rewrite code to decrease LSD<br/>\(Loop Stream Detector\)
- LINK
<pre>http://sergey-miryanov.blogspot.com.ee/2008/05/loop-stream-detector.html</pre>

######## It is very complex approach <br/>mainly it is impossible from Java

####### make data loose coupling
- LINK
<pre>https://en.wikipedia.org/wiki/Loose_coupling</pre>
